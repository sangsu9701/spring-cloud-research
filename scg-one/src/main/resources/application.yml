# application.yml
server:
  port: 8080

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8787/eureka
#predicates : api-gateway 서버로 요청이 들어왔을 때 요청 url의 조건을 명시합니다.
#  uri
#  predicates 조건에 매칭되는 url을 어디로 라우팅 시킬지 명시합니다.
#  lb:// 뒤에는 유레카 서버에 등록된 프로젝트의 application.name을 적어주면 됩니다.
#  lb는 load balancer의 약자로 eureka-client-one가 여러 개 띄워져 있다면 라운드 로빈 방식으로 트래픽을 분산해줍니다.
#filters : 필터를 적용합니다.
#RewritePath : 요청으로 들어온 url을 변경해줍니다.
#  predicate의 조건에 따르면 eureka-client-one/ 또는 eureka-client-two/ 와 같은 url로 요청하면 해당 마이크로서비스로 요청을 라우팅해줍니다.
#  그러나 필터로 rewirtePath를 해주지 않으면 라우팅될 때, 요청 url이 localhost:8080/eureka-client-one의 형태로 요청됩니다.
#  즉, eureka-client-one프로젝트와 eureka-client-two의 컨트롤러에 @RequestMapping("/eureka-client-one")와 같은 매핑이 필요하게 됩니다.
#  따라서 앞쪽에 eureka-client-one, eureka-client-two를 제거하고 뒤쪽의 url만 사용하여 요청을 보낼 수 있도록 rewrite해줘야 합니다.
spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      routes: # 라우팅 설정
        - id: eureka-client-one # 구분하기 위한 id값으로 임의로 작성해도 무관
          predicates: # 조건
            - Path=/eureka-client-one/** # eureka-client-one/ 으로 요청이 들어오면
          uri: lb://EUREKA-CLIENT-ONE # 유레카 서버에서 EUREKA-CLIENT-ONE를 찾아서 그곳으로 요청을 보낸다.
          filters:
            # url 재정의
            # ?<변수명>은 뒤에 나오는 정규식을 변수처럼 사용할 수 있도록 한다. ()는 하나의 묶음 처리 -> segment는 (.*)를 의미
            # 콤마(,)를 기준으로 왼쪽 url을 오른쪽 url로 재정의한다.
            # 콤마 기준 오른쪽 부분은 ${변수명}으로 url 가져오고 앞에 / 붙여준거라고 보면 된다.
            - RewritePath=/eureka-client-one/(?<segment>.*), /$\{segment}
        - id: eureka-client-two
          predicates:
            - Path=/eureka-client-two/**
          uri: lb://EUREKA-CLIENT-TWO
          filters:
            - RewritePath=/eureka-client-two/(?<segment>.*), /$\{segment}